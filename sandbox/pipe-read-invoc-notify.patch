diff --git a/fs/pipe.c b/fs/pipe.c
index 12b22c272..b8e9c66b8 100644
--- a/fs/pipe.c
+++ b/fs/pipe.c
@@ -387,6 +387,8 @@ pipe_read(struct kiocb *iocb, struct iov_iter *to)
 		 * since we've done any required wakeups and there's no need
 		 * to mark anything accessed. And we've dropped the lock.
 		 */
+		atomic_inc(&pipe->read_invoc_seqno);
+		wake_up_interruptible_all(&pipe->read_invoc_wait);
 		if (wait_event_interruptible_exclusive(pipe->rd_wait, pipe_readable(pipe)) < 0)
 			return -ERESTARTSYS;
 
@@ -615,7 +617,7 @@ pipe_write(struct kiocb *iocb, struct iov_iter *from)
 static long pipe_ioctl(struct file *filp, unsigned int cmd, unsigned long arg)
 {
 	struct pipe_inode_info *pipe = filp->private_data;
-	unsigned int count, head, tail, mask;
+	unsigned int count, read_invoc_seqno, head, tail, mask;
 
 	switch (cmd) {
 	case FIONREAD:
@@ -633,6 +635,11 @@ static long pipe_ioctl(struct file *filp, unsigned int cmd, unsigned long arg)
 
 		return put_user(count, (int __user *)arg);
 
+	case IOC_PIPE_WAIT_READ_INVOC:
+		read_invoc_seqno = atomic_read(&pipe->read_invoc_seqno);
+		return wait_event_interruptible(pipe->read_invoc_wait,
+			atomic_read(&pipe->read_invoc_seqno) != read_invoc_seqno);
+
 #ifdef CONFIG_WATCH_QUEUE
 	case IOC_WATCH_QUEUE_SET_SIZE: {
 		int ret;
@@ -739,6 +746,7 @@ pipe_release(struct inode *inode, struct file *file)
 	}
 	mutex_unlock(&pipe->mutex);
 
+	wake_up_interruptible_all(&pipe->read_invoc_wait);
 	put_pipe_info(inode, pipe);
 	return 0;
 }
@@ -825,6 +833,10 @@ struct pipe_inode_info *alloc_pipe_info(void)
 		pipe->user = user;
 		mutex_init(&pipe->mutex);
 		lock_set_cmp_fn(&pipe->mutex, pipe_lock_cmp_fn, NULL);
+
+		init_waitqueue_head(&pipe->read_invoc_wait);
+		atomic_set(&pipe->read_invoc_seqno, 0);
+
 		return pipe;
 	}
 
diff --git a/include/linux/pipe_fs_i.h b/include/linux/pipe_fs_i.h
index ca6f2d707..ce433beab 100644
--- a/include/linux/pipe_fs_i.h
+++ b/include/linux/pipe_fs_i.h
@@ -8,6 +8,9 @@
 
 #define PIPE_DEF_BUFFERS	16
 
+// waits until a task blocks to read
+#define IOC_PIPE_WAIT_READ_INVOC	_IO('?', 0x69)
+
 #define PIPE_BUF_FLAG_LRU	0x01	/* page is on the LRU */
 #define PIPE_BUF_FLAG_ATOMIC	0x02	/* was atomically mapped */
 #define PIPE_BUF_FLAG_GIFT	0x04	/* page is a gift */
@@ -57,6 +60,8 @@ struct pipe_buffer {
  *	@fasync_writers: writer side fasync
  *	@bufs: the circular array of pipe buffers
  *	@user: the user who created this pipe
+ *	@read_invoc_wait: ioctl wait point to block until a task blocks to read
+ *	@read_invoc_seqno: counter that increments when a task blocks to read
  *	@watch_queue: If this pipe is a watch_queue, this is the stuff for that
  **/
 struct pipe_inode_info {
@@ -81,6 +86,8 @@ struct pipe_inode_info {
 	struct fasync_struct *fasync_writers;
 	struct pipe_buffer *bufs;
 	struct user_struct *user;
+	wait_queue_head_t read_invoc_wait;
+	atomic_t read_invoc_seqno;
 #ifdef CONFIG_WATCH_QUEUE
 	struct watch_queue *watch_queue;
 #endif
